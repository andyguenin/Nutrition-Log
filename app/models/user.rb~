require 'digest'
class User < ActiveRecord::Base

# accessor methods
	attr_accessor :password
	attr_accessible :name, :email, :password, :password_confirmation

# foreign key relations
	has_many :ingredients, 
		:foreign_key => "creator_id"
	
	has_many :recipes, 
		:foreign_key => "creator_id"
	
	has_many :logs
	
	has_many :recently_consumed_ingredients,
		:through => :logs,
		:class_name => "Ingredient",
		:conditions => ['logs.created_at > ?', 7.days.ago],
		:source => :ingredient,
		:foreign_key => "ingredient_id"
	
	has_many :consumed_ingredients, 
		:class_name => "Ingredient", 
		:through => :logs,
		:source => :ingredient

	has_many :log_recipes

	has_many :consumed_recipes, 
		:class_name => "Recipe",
		:through => :log_recipes,
		:source => :recipe
	

# validations
	validates :name, 
		:presence => true
	
	validates :email, 
		:presence => true,
		:format=> { :with => /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i },
		:uniqueness => {:case_sensitive => false }

	validates :password, 
		:presence => true,
		:confirmation => true,
		:length => {:minimum => 6},
		:if => :save_password?

	validates :password_confirmation, 
		:presence => true,
		:if => :save_password?


	def consume_recipe(r)
		self.consumed_recipes << r
		last = self.log_recipes.order("id desc").limit(1).first
		r.ingredients.each do |i|
			self.logs.create(:ingredient_id => i.id, :servings => 1, :date => Time.now, :log_recipe_id => last.id)
		end
	end

# callbacks
	before_save :encrypt_password

# methods
	def has_password?(sub_pwd)
		encrypted_password == encrypt(sub_pwd)
	end

	def self.authenticate(email, submitted_password)
		user = find_by_email(email)
		return nil if user.nil?
		return user if user.has_password?(submitted_password)
	end

	def self.authenticate_with_salt(id, cookie_salt)
		user = User.find_by_id(id)
		(user && user.salt == cookie_salt) ? user : nil
	end

	private

		def save_password?
			new_record? || !password.nil?	|| !password_confirmation.nil?
		end

		def encrypt_password
			self.salt = make_salt unless has_password?(password)
			self.encrypted_password = encrypt(password)
		end

		def encrypt(string)
			secure_hash("#{salt}--#{string}")
		end

		def make_salt
			secure_hash("#{Time.now.utc}--#{password}")
		end

		def secure_hash(string)
			Digest::SHA2.hexdigest(string)
		end

def calculate(age, weight, height, sex, activityFactor)


#All vitamins and minerals are daily recommended equally for everyone (obviously ignoring small children who this program is not aimed at)


@VAScore=0
if(@VitA<900)
		@VAScore = (900-@VitA)/180
		end
		if(@VitA>3000)
				@VAScore = (@VitA-900)/180
				end

				@VB6Score=0
				if(@VitB6<1.3)
						@VB6Score = (1.3-@VitB6)/0.26
						end
						if(@VitB6>100)
								@VB6Score = (@VitB6-100)/0.26
								end

								@VB12Score=0
								if(@VitB12<2.4)
										@VB12Score = (2.4-@VitB12)/0.48
										end

										@VCScore =0
										if(@VitC<90)
												@VCScore = (90-@VitC)/18
												end
												if(@VitC>2000)
														@VCScore = (@VitC-2000)/18
														end

	  @VDScore = 0
		if(@VitD<1.5)
			@VDScore = (1.5-@VitD)/0.3
		end
		if(@VitD>100)
			@VDScore = (@VitD-100)/0.3
		end

		@CalcScore = 0
		if(@Calc<1000)
			@CalcScore = (1000-Calc)/200
		end
		if(@Calc>2500)
			@CalcScore = (@Calc-2500)/200
		end

		@PotasScore = 0
		if(@Potas<4.7)
			@PotasScore = (4.7-@Potas)/9.4
		end

		@SodScore = 0
		if(@Sod<1.5)
			@SodScore = (1.5-@Sod)/0.3
		end
		if(@Sod>2.3)
		@SodScore = (@Sod-2.3)/0.3
		end
		@FiberScore = 0
		if(@Fiber<25)
			@FiberScore=(25-Fiber)/5
		end


		@CarbScore = 0
		if(@Carb<200)
			@CarbScore = (200-@CarbScore)/40
		end
		if(@Carb>550)
			@CarbScore = (@CarbScore-550)/20
		end

		@BMR = 0
		if (@Sex = 0)
			@BMR = (66+(6.23*weight)+(12.7*height)-(6.8*age)
		else
			@BMR = (655+(4.35*weight)+(4.7*height)-(4.7*age)
		end
		@ExpCal =0;
		if(@ActFact==1)
			@ExpCal=@BMR*1.2
		end
		if(@ActFact==2)
			@ExpCal=@BMR*1.375
		end
		if(@ActFact==3)
			@ExpCal=@BMR*1.55
		end
		if(@ActFact==4)
			@ExpCal=@BMR*1.725
		end
		if(@ActFact==5)
			@ExpCal=@BMR*1.9
		end

		@CalScore=0
		if(@Cal<@ExpCal-350)
			@CalScore=(@ExpCal-350-@Cal)/100
		end
		if(@Cal>@ExpCal+150)
			@CalScore=(@Cal-@ExpCal-150)/100
		end

																																																				@TFScore = 0;
		if(@TFats>@ExpCal/1000)
			@TFScore = (TFats-ExpCal/1000)/2
		end

		SFScore = 0
		if(SFats> ExpCal/90)
			SFScore = (SFats-ExpCal/90)/20
		end
		FatScore=0
		if(Fats>height-(10*sex)-((age-20)/10)+((ActFact-1)*4))
			FatScore = (Fats- height-(10*sex)-((age-20)/10)+((ActFact-1)*4))/4
		end
		ExpProt = 0
		if(ActFact=1)
			ExpProt=weight/2.2*.8
		end
		if(ActFact=2)
			ExpProt=weight/2.2*1
		end
		if(ActFact=3)
			ExpProt=weight/2.2*1.3
		end
		if(ActFact=4)
			ExpProt=weight/2.2*1.2
		end
		if(ActFact=5)
			ExpProt=weight/2.2*1.6
		end
		ProtScore=0
		if(Prot<ExpProt-15)
			ProtScore =(ExpProt-15-Prot)/5
		end
		if(Prot>ExpProt+15)
			ProtScore = (Prot-ExpProt-15)/5
		end
		CholScore=0
		if(Chol>300)
			CholScore = (Chol-300)/15
		end

		TotalScore = 100 – ProtScore – FatScore – SFScore – TFScore – CalScore – CarbScore – FiberScore – SodScore – PotasScore – CalcScore – VDScore – VCScore – VB12Score – VB6Score – VAScore - CholScore;




end

end
